#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#define MOUSE 5
#define SCROLL 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&lt {
    quick-tap-ms = <300>;
    flavor = "balanced";
};

/ {
    combos {
        compatible = "zmk,combos";

        copy {
            bindings = <&kp RG(C)>;
            key-positions = <16 17>;
        };

        paste {
            bindings = <&kp RG(V)>;
            key-positions = <17 18>;
        };

        cut {
            bindings = <&kp RG(X)>;
            key-positions = <6 7>;
        };

        left {
            bindings = <&kp LEFT_ARROW>;
            key-positions = <18 19>;
        };

        right {
            bindings = <&kp RIGHT_ARROW>;
            key-positions = <19 20>;
        };

        up {
            bindings = <&kp UP_ARROW>;
            key-positions = <7 8>;
        };

        down {
            bindings = <&kp DOWN>;
            key-positions = <30 31>;
        };

        page_up {
            bindings = <&kp PAGE_UP>;
            key-positions = <28 29>;
        };

        page_down {
            bindings = <&kp PAGE_DOWN>;
            key-positions = <29 30>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <10 11>;
        };

        all {
            bindings = <&kp RG(A)>;
            key-positions = <15 16>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        bracet: bracet {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_1 &kp LEFT_BRACKET &kp RIGHT_BRACKET &kp ENTER &kp LEFT_ARROW>;
            label = "BRACET";
        };

        tilde: tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_1 &kp RS(TILDE)>;
            label = "TILDE";
        };

        parentheses: parentheses {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_1 &kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp ENTER &kp LEFT_ARROW>;
            label = "PARENTHESES";
        };

        new_bracket: new_bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_1 &kp LS(LEFT_BRACKET) &kp RS(RIGHT_BRACKET) &kp ENTER &kp LEFT_ARROW>;
            label = "NEW_BRACKET";
        };

        split_right: split_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "SPLIT_RIGHT";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        scroll_right_left: mouse_wheel_right_left {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E             &kp R                        &kp T                                                     &kp Y             &kp U  &kp I      &kp O       &kp P
&kp A             &kp S         &kp D             &kp F                        &kp G                                  &kp RC(K)          &kp H             &kp J  &kp K      &kp L       &lt 1 ENTER
&mt LEFT_SHIFT Z  &kp X         &kp C             &kp V                        &kp B        &lt 4 SLASH               &kp RC(SEMICOLON)  &kp N             &kp M  &kp COMMA  &kp PERIOD  &mt RSHIFT MINUS
&kp LEFT_COMMAND  &kp LEFT_ALT  &kp LEFT_CONTROL  &lt_to_layer_0 3 LANGUAGE_2  &lt 2 SPACE  &lt_to_layer_0 1 SPACE    &kp BACKSPACE      &lt 1 LANGUAGE_1                                &kp TILDE
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        layer_1 {
            bindings = <
&bracet       &kp PLUS   &kp NUMBER_1  &kp NUMBER_2    &kp NUMBER_3                                          &kp RC(RA(LEFT_ARROW))  &kp F11               &kp RC(UP_ARROW)       &kp RC(RG(F))  &kp RC(RA(RIGHT_ARROW))
&parentheses  &kp EQUAL  &kp NUMBER_4  &kp N5          &kp NUMBER_6                               &trans     &kp ESCAPE              &mkp MB1              &mkp MB2               &kp RG(TAB)    &kp RG(H)
&kp EXCL      &kp COLON  &kp N7        &kp N8          &kp N9              &kp N0                 &trans     &kp RG(N)               &kp RG(LEFT_BRACKET)  &kp RG(RIGHT_BRACKET)  &kp RC(TAB)    &kp RG(W)
&kp AMPS      &kp PRCNT  &kp APOS      &kp UNDERSCORE  &kp LC(LEFT_ARROW)  &kp LC(RIGHT_ARROW)    &kp RG(Z)  &kp RS(RG(Z))                                                                       &kp RG(Q)
            >;

            sensor-bindings = <&scroll_right_left>;
        };

        layer_2 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &kp HOME        &kp UP_ARROW   &kp END    &trans
&trans  &trans  &trans  &trans  &trans            &trans  &trans  &kp LEFT_ARROW  &kp DOWN       &kp RIGHT  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &kp PAGE_UP     &kp PAGE_DOWN  &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                                            &trans
            >;

            sensor-bindings = <&inc_dec_kp C_BRIGHTNESS_DEC C_BRIGHTNESS_INC>;
        };

        layer_3 {
            bindings = <
&trans  &kp LC(LS(TAB))     &kp PRINTSCREEN         &kp LC(TAB)              &trans                    &trans  &kp HOME        &kp UP_ARROW    &kp END          &trans
&trans  &kp LG(LEFT_ARROW)  &kp LG(RIGHT_ARROW)     &kp LC(LG(LEFT_ARROW))   &trans            &trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&trans  &kp LEFT_SHIFT      &kp LG(LS(LEFT_ARROW))  &kp LG(LS(RIGHT_ARROW))  &trans  &trans    &trans  &trans  &kp DELETE      &kp PAGE_UP     &kp PAGE_DOWN    &trans
&trans  &trans              &trans                  &trans                   &trans  &trans    &trans  &trans                                                   &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                         &trans  &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans            &trans       &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3
&trans  &trans  &trans  &trans  &trans  &trans    &bootloader  &trans  &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans    &trans       &trans                                            &bt BT_CLR_ALL
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans
&trans  &mkp MB3  &mkp MB2  &mkp MB1  &trans            &trans  &trans  &mkp MB1  &mkp MB2  &mkp MB3  &trans
&trans  &trans    &trans    &trans    &trans  &trans    &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans    &trans    &trans    &trans  &trans    &trans  &trans                                &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                          &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };
    };
};
